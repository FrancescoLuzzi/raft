// This file is @generated by prost-build.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LogEntry {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(oneof = "log_entry::Value", tags = "2, 3, 5000")]
    pub value: ::core::option::Option<log_entry::Value>,
}
/// Nested message and enum types in `LogEntry`.
pub mod log_entry {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Value {
        #[prost(int32, tag = "2")]
        Number(i32),
        #[prost(string, tag = "3")]
        String(::prost::alloc::string::String),
        #[prost(message, tag = "5000")]
        Raw(::prost_types::Any),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendEntriesRequest {
    #[prost(uint32, tag = "1")]
    pub term: u32,
    #[prost(uint32, tag = "2")]
    pub leader_id: u32,
    #[prost(uint32, tag = "3")]
    pub prev_log_index: u32,
    #[prost(uint32, tag = "4")]
    pub prev_log_term: u32,
    #[prost(uint32, tag = "5")]
    pub leader_commit: u32,
    #[prost(message, repeated, tag = "5000")]
    pub entries: ::prost::alloc::vec::Vec<LogEntry>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AppendEntriesResponse {
    #[prost(uint32, tag = "1")]
    pub term: u32,
    #[prost(bool, tag = "2")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RequestVoteRequest {
    #[prost(uint32, tag = "1")]
    pub term: u32,
    #[prost(uint32, tag = "2")]
    pub candidate_id: u32,
    #[prost(uint32, tag = "3")]
    pub last_log_index: u32,
    #[prost(uint32, tag = "4")]
    pub last_log_term: u32,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RequestVoteResponse {
    #[prost(uint32, tag = "1")]
    pub term: u32,
    #[prost(bool, tag = "2")]
    pub vote_granted: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallSnapshotRequest {
    #[prost(uint32, tag = "1")]
    pub term: u32,
    #[prost(uint32, tag = "2")]
    pub leader_id: u32,
    #[prost(uint32, tag = "3")]
    pub last_included_index: u32,
    #[prost(uint32, tag = "4")]
    pub last_included_term: u32,
    #[prost(uint32, tag = "5")]
    pub offset: u32,
    #[prost(bool, tag = "6")]
    pub done: bool,
    #[prost(message, repeated, tag = "7")]
    pub data: ::prost::alloc::vec::Vec<::prost_types::Any>,
}
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InstallSnapshotResponse {
    #[prost(uint32, tag = "1")]
    pub term: u32,
}
